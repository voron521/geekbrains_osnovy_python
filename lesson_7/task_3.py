# Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и целочисленное (с округлением до целого) деление клеток, соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n*****.
# Подсказка: подробный список операторов для перегрузки доступен по ссылке.

class Cell:
    def __init__(self, number_cell):
        self.number_cell = number_cell

    def __add__(self, other):
        return Cell(self.number_cell + other.number_cell)

    def __sub__(self, other):
        if self.number_cell > other.number_cell:
            return Cell(self.number_cell - other.number_cell)
        else:
            return "получается отрицательное число"

    def __mul__(self, other):
        return Cell(self.number_cell * other.number_cell)

    def __truediv__(self, other):
        return Cell(self.number_cell / other.number_cell)

    def make_order(self, number_row):
        str = ""
        for el in range(self.number_cell // number_row):
            str = f"{str}{'*' * number_row}\n"
        if self.number_cell % number_row:
            str = f"{str}{'*' * (self.number_cell % number_row)}\n"
        return str

    def __str__(self):
        return f"{self.number_cell}"


ce_1 = Cell(12)
ce_2 = Cell(5)
ce_3 = Cell(1)

number_cell = 8

print(f"Сложение клеток: {ce_1 + ce_2 + ce_3}\n")
print(f"Вычитание клеток клеток: {ce_1 - ce_2}\n")
print(f"Умножение клеток клеток: {ce_1 * ce_2 * ce_3}\n")
print(f"Деление клеток: {ce_1 / ce_2}\n")
print(f"Результат метода make_order:\n{ce_1.make_order(number_cell)}")
